#!/bin/sh -e

PATH=/sbin:/usr/sbin/:bin:/usr/bin

if [ -f /etc/default/distro ]; then
	. /etc/default/distro
fi

say() {
	echo "I: $@..."
}

do_postinst() {
	say 'Reconfiguring distro-defaults and other settings'
	# Reconfigure to ensure out LSB defaults are in place for
	# starting desktop managers in runlevel 5 only
	for dm in gdm3 kdm lxdm slim wdm xdm lightdm; do
		[ -x /etc/init.d/${dm} ] || continue
		update-rc.d -f ${dm} remove
	done

	dpkg-reconfigure distro-defaults

	for dm in gdm3 kdm lxdm slim wdm xdm lightdm; do
		[ -x /etc/init.d/${dm} ] || continue
		update-rc.d ${dm} defaults
	done

	say 'Disabling selected initscripts which should not start in live mode'

	# remember keep service blacklists in sync with fll-installer!
	DISABLED_SERVICES="anacron cron bootlogd bootlogs stop-bootlogd stop-bootlogd-single"
	REMOVED_SERVICES=""
	SERVICE_BLACKLIST="rsync ssh lirc mysql postfix"

	# disable services not wanted on the live CD
	for service in ${DISABLED_SERVICES} ${SERVICE_BLACKLIST}; do
		[ -x "/etc/init.d/${service}" ] || continue
		update-rc.d "${service}" disable
	done

	# remove particularly nasty services, don't use!
	for service in ${REMOVED_SERVICES}; do
		[ -x "/etc/init.d/${service}" ] || continue
		update-rc.d -f "${service}" remove
	done

	# Quite hacky, but /etc/nbd-client default conf
	# leaves a broken partial /dev/nbd0 config
	sed -i 's#/dev/nbd0##' /etc/nbd-client

	say 'Hacking /etc/inittab for passwdless login'
	# We also set default runlevel to 5
	sed -e 's#^id:[0-6]:initdefault:#id:5:initdefault:#' \
	    -e 's#:/sbin/getty#:/sbin/getty -n -i -l /usr/bin/fll_login#' \
	    -e 's#^\([0-6]\):23:#\1:2345:#' \
		/usr/share/sysvinit/inittab > /etc/inittab

	say 'Preseeding /etc/adduser.conf'
	sed -i 's/^DIR_MODE=.*/DIR_MODE=0700/' /etc/adduser.conf

	. /etc/default/distro
	unset GROUPS
	for g in ${FLL_LIVE_USER_GROUPS}; do
		if getent group ${g} >/dev/null; then
			GROUPS="${GROUPS} ${g}"
		fi
	done

	sed -i -e 's/^#\?\(EXTRA_GROUPS=\).*/\1"'"${GROUPS# }"'"/' \
	       -e 's/^#\?\(ADD_EXTRA_GROUPS=\).*/\11/' \
		/etc/adduser.conf

}

add_live_user()
{
adduser --gecos "${FLL_LIVE_USER}" "${FLL_LIVE_USER}" <<EOF
live
live
EOF
}

hack_sudoers() 
{
say 'Adding ${FLL_USER_NAME} user to sudoers group' 
# append sudoers entry
	cat >> "/etc/sudoers.d/15_${FLL_DISTRO_NAME}" \
<<EOF
# WARNING: This allows the unprivileged ${FLL_LIVE_USER} user to start commands as root
# WARNING: This is totally insecure and (almost) makes ${FLL_LIVE_USER} a second root account.
# WARNING: Never allow external access to the ${FLL_LIVE_USER} user!!!
${FLL_LIVE_USER} ALL=(ALL:ALL) NOPASSWD: ALL
EOF
		chmod 0440 "/etc/sudoers.d/15_${FLL_DISTRO_NAME}"
}

hack_bashrc()
{
say 'Writing .bashrc for default user'
FLL_LIVE_USER_HOME=$(getent passwd ${FLL_LIVE_USER} | cut -d\: -f 6)
grep -s -q 'alias su' ${FLL_LIVE_USER_HOME}/.bashrc && return 0

printf "\nalias su='sudo su'\nalias sux='sudo sux'\n" \
	>> ${FLL_LIVE_USER_HOME}/.bashrc
}

all_users_common_settings()
{
# we run all users settings
if [ -f /usr/share/siduction-live-settings/common/siduction-all-users-settings ] ;then
	say 'Writng global users settings'
	/usr/share/siduction-live-settings/common/siduction-all-users-settings
fi
}

user_home_common_settings()
{
# preseed user home settings
if [ -f /usr/share/siduction-live-settings/common/siduction-user-home-settings ] ;then
	say 'Writing common settings for default user'
	su "${FLL_LIVE_USER}" -c /usr/share/siduction-live-settings/common/siduction-user-home-settings
fi
}


case "${1}" in
	postinst)
		do_postinst
		add_live_user
		hack_sudoers
		hack_bashrc
		all_users_common_settings
		user_home_common_settings
		;;
	*)
		echo "Usage: ${0} postinst"
		;;
esac

