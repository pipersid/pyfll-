#!/bin/sh -e

say() {
	echo "I: $@..."
}

get_efitarget() {
	if [ "$efitype" = "x86_64-efi" ] ; then
		efitarget="bootx64"
	elif [ "$efitype" = "i386-efi" ] ; then
		efitarget="bootia32"
	fi
}

do_postinst() {
	# create grub2 ElTorito support
	if which grub-mkimage >/dev/null; then
		say 'Creating grub2 El Torito image file'
		grub-mkimage -d /usr/lib/grub/*-pc/ --format=i386-pc -o /tmp/grub_eltorito~ biosdisk iso9660
		cat /usr/lib/grub/*-pc/cdboot.img /tmp/grub_eltorito~ > /tmp/grub_eltorito
                say 'Creating grub2 hd image file'
                tmp_dir=`mktemp -d "/tmp/tmp.XXXXXXXXXX"` || exit 1
                cat << EOF > ${tmp_dir}/grub.cfg
set from=fromhd
export from
configfile \$prefix/grub.cfg
EOF

                grub-mkimage -O i386-pc -c ${tmp_dir}/grub.cfg -o ${tmp_dir}/core.img biosdisk iso9660
                cat /usr/lib/grub/*-pc/boot.img ${tmp_dir}/core.img > /tmp/grub_embed
		efitypes="x86_64-efi i386-efi"
		doefi=""
		for efitype in $efitypes ; do
			[ -d "/usr/lib/grub/${efitype}" ] && doefi="Y"
		done
		if [ -n "${doefi}" ] ; then
			say 'Creating grub-efi boot files'
			# if we already have an iso_uuid (many-arch) use it, otherwise create one
			if [ ! -e /tmp/iso_uuid ]; then
				iso_uuid=$(date -u +%Y-%m-%d-%H-%M-%S-00)
				echo ${iso_uuid} | sed -e s/-//g > /tmp/iso_uuid
			else
				iso_uuid=$(cat /tmp/iso_uuid)
			fi
			mkdir /tmp/uuid
			touch /tmp/uuid/${iso_uuid}
			# create the memdisk image for cd booting
			memdisk_img=`mktemp "/tmp/tmp.XXXXXXXXXX"` || exit 1
			memdisk_dir=`mktemp -d "/tmp/tmp.XXXXXXXXXX"` || exit 1
			mkdir -p ${memdisk_dir}/boot/grub
			cat << EOF > ${memdisk_dir}/boot/grub/grub.cfg
set from=""
export from
search --fs-uuid --set=root ${iso_uuid}
set prefix=(\${root})/boot/grub
source \$prefix/grub.cfg
EOF
			(cd "${memdisk_dir}"; tar -cf - boot) > "${memdisk_img}"
			rm -rf ${memdisk_dir}
			mkdir -p /tmp/efi_img/efi/boot
			mkdir -p /tmp/efi/boot
			for efitype in $efitypes ; do
				if [ -d "/usr/lib/grub/$efitype" ] ; then
					get_efitarget
					grub-mkimage -O ${efitype} -m "${memdisk_img}" --prefix='(memdisk)/boot/grub' -o /tmp/efi_img/efi/boot/${efitarget}.efi search iso9660 configfile normal memdisk tar part_msdos part_gpt fat
				fi
			done
			rm -rf ${memdisk_img}
			for efitype in $efitypes ; do
				if [ -d "/usr/lib/grub/${efitype}" ] ; then
					# create the .efi for hd booting
					get_efitarget
					memdisk_dir=`mktemp -d "/tmp/tmp.XXXXXXXXXX"` || exit 1
					mkdir -p ${memdisk_dir}/boot/grub
					cat << EOF > ${memdisk_dir}/boot/grub/grub.cfg
set from=fromhd
export from
search --file --set=root /boot/grub/${efitype}/${iso_uuid}
set prefix=(\${root})/boot/grub
source \$prefix/grub.cfg
EOF
					(cd "${memdisk_dir}"; tar -cf - boot) > "${memdisk_img}"
					rm -rf ${memdisk_dir}
					grub-mkimage -O ${efitype} -m "${memdisk_img}" --prefix='(memdisk)/boot/grub' -o /tmp/efi/boot/${efitarget}.efi search iso9660 configfile normal memdisk tar part_msdos part_gpt lvm fat ext2
				fi
			done
		fi
	fi

	# disable recovery modes for grub2
	if [ -w /etc/default/grub ]; then
		if grep -q ^GRUB_DISABLE_RECOVERY\= /etc/default/grub; then
			sed -i "s/^\(GRUB_DISABLE_RECOVERY=\).*/\1\"true\"/" /etc/default/grub
		else
			sed -i "s/^\#\(GRUB_DISABLE_RECOVERY=\).*/\1\"true\"/" /etc/default/grub
		fi
	fi

	# initscripts defers creating the mtab symlink to the first boot,
	# create it here to avoid the creation warning.
	say 'Make mtab a symlink to /proc/mounts'
	if [ ! -L /etc/mtab ]; then
		rm -f /etc/mtab
		ln -sf /proc/mounts /etc/mtab
	fi
}

do_journaling() {
    addgroup --system systemd-journal
    mkdir -p /var/log/journal
    chown root:systemd-journal /var/log/journal
}

case "${1}" in
    postinst)
        do_journaling
        do_postinst
        ;;
    *)
        echo "Usage: ${0} postinst"
        ;;
esac

:
